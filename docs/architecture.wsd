@startuml architecture
!if %variable_exists("RELATIVE_INCLUDE")
    !include %get_variable_value("RELATIVE_INCLUDE")/C4_Context.puml
    !include %get_variable_value("RELATIVE_INCLUDE")/C4_Container.puml
    !include %get_variable_value("RELATIVE_INCLUDE")/C4_Component.puml
!else
    !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
    !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
    !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!endif

SHOW_PERSON_OUTLINE()

AddElementTag("proposed", $bgColor="#666666", $fontColor="#bfbfbf", $borderColor="#bfbfbf")
AddRelTag("async", $textColor=$ARROW_FONT_COLOR, $lineColor=$ARROW_COLOR, $lineStyle=DashedLine())
AddRelTag("sync/async", $textColor=$ARROW_FONT_COLOR, $lineColor=$ARROW_COLOR, $lineStyle=DottedLine())

title Component diagram for Routing service

System(client, "A client of service", "Services, web- or mobile- applications", $sprite="clients")

System_Boundary(api, "Routing Service") {
    Component(rest_api, "REST API server")
    Component(bridge, "A bridge to routing services")
    ComponentDb(mem_cache, "An in-memory cache")
    Component(cache, "A cache of data from routing data")
    Component(decorator, "A decorator of external routing services")
        
    Rel_Neighbor(cache, mem_cache, "Fetch/store", "sync")
    Rel(rest_api, bridge, "Fetch routing data", "sync")
    Rel(bridge, cache, "Fetch/store cached data", "sync")
    Rel(bridge, decorator, "Fetch rouging data", "async")
}

ContainerDb(cach_db, "Cache Database", "NoSQL", "Stores  with TTL routing data already fetched", "proposed", $sprite="postgresql,color=gray")

System_Ext(osrm, "Routing Machine service")

Rel(client, rest_api, "Fetch geo-data", "sync")
Rel(cache, cach_db, "Fetch cached data", "sync")
Rel(decorator, osrm, "Fetch geo-data", "async")
@enduml
